#+TITLE: Merlin backend for eldoc

This package provide a merlin backend for eldoc. Its goal is to
automatically (without using keybindings) display the type,
documentation and occurrences of the value under the point in OCaml or
ReasonML files. It also provides the type of arguments expected by a
function when this function is getting applied. The information are
obtained from merlin.

* Examples

In the following example, the cursor is at ~<-!->~ and idle long
enough for eldoc to fire.

1. Type of a function

   #+BEGIN_SRC ocaml
let my<-!->add ~f ~i =
  f +. (float i)
   #+END_SRC

The information in the minibuffer will be:

   #+BEGIN_SRC ocaml
f:float -> i:int -> float
   #+END_SRC

2. Type and documentation of a function

   #+BEGIN_SRC ocaml
(** [myadd f i] add f and i *)
let my<-!->add ~f ~i =
  f +. (float i)
   #+END_SRC

With type and doc enabled, it shows:

   #+BEGIN_SRC ocaml
f:float -> i:int -> float     (* [myadd f i] add f and i *)
   #+END_SRC

3. Type and documentation of ~List.map~ limited to one line

   #+BEGIN_SRC ocaml
List.map<-!->
   #+END_SRC

The exact result will depend on the width of the Emacs frame.

   #+BEGIN_SRC ocaml
('a -> 'b) -> 'a list -> 'b list (* [List.map f [a1; ...; an]] applies function [f] to [a1, ..., an], and builds... *)
   #+END_SRC

4. Type and documentation of ~List.map~ on multiple lines

   #+BEGIN_SRC ocaml
List.map<-!->
   #+END_SRC

   If at least 4 lines are allowed:

   #+BEGIN_SRC ocaml
(* [List.map f [a1; ...; an]] applies function [f] to [a1, ..., an],
   and builds the list [[f a1; ...; f an]]
   with the results returned by [f].  Not tail-recursive. *)
('a -> 'b) -> 'a list -> 'b list
   #+END_SRC

5. Function application and arguments types

   #+BEGIN_SRC ocaml
let apply ~f ~i op =
  op @@ f +. (float i)

let v = apply <-!->
   #+END_SRC

   #+BEGIN_SRC ocaml
(* expected type: *) float -> 'a
(* labels: *) ~f:float -> ~i:int
   #+END_SRC

   Depending on the value of
   ~merlin-eldoc-max-lines-function-arguments~ it can also be
   displayed on one line.

   #+BEGIN_SRC ocaml
(* expected type: *) float -> 'a (* labels: *) ~f:float -> ~i:int
   #+END_SRC

6. Function application and arguments types, with some arguments already given

   #+BEGIN_SRC ocaml
let apply ~f ~i op =
  op @@ f +. (float i)

let v = apply ~i:3 <-!->
   #+END_SRC

   #+BEGIN_SRC ocaml
(* expected type: *) float -> 'a (* labels: *) ~f:float
   #+END_SRC

7. Type expected by a label

   #+BEGIN_SRC ocaml
let apply ~f ~i op =
  op @@ f +. (float i)

let v = apply ~i:<-!->
   #+END_SRC

   #+BEGIN_SRC ocaml
(* expected type: *) int
   #+END_SRC

* Installation

For now the package is not published on melpa.

** Quelpa

With quelpa already installed and configured:

#+BEGIN_SRC emacs-lisp
(quelpa '(merlin-eldoc :repo "Khady/merlin-eldoc" :fetcher github))
#+END_SRC

** With ~use-package~

1. Clone this repository in ~$HOME/.emacs.d/vendor~

   #+BEGIN_SRC bash
mkdir -p "$HOME/.emacs.d/vendor"
cd "$HOME/.emacs.d/vendor"
git clone https://github.com/Khady/merlin-eldoc.git
   #+END_SRC

2. Add this code to ~init.el~

   #+BEGIN_SRC emacs-lisp
(use-package merlin-eldoc
  :load-path "~/.emacs.d/vendor/merlin-eldoc/"
  :hook ((reason-mode tuareg-mode caml-mode) . merlin-eldoc-setup))
   #+END_SRC

** The more manual way

1. Clone this repository in ~$HOME/.emacs.d/vendor~

   #+BEGIN_SRC bash
mkdir -p "$HOME/.emacs.d/vendor"
cd "$HOME/.emacs.d/vendor"
git clone https://github.com/Khady/merlin-eldoc.git
   #+END_SRC

2. Add this code to ~init.el~

   #+BEGIN_SRC emacs-lisp
;; Add the folder containing this package to the load-path
(add-to-list 'load-path "~/.emacs.d/vendor/merlin-eldoc/")
;; Require the package
(require 'merlin-eldoc)
;; Add a hook to start the mode automatically for OCaml and Reason
(add-hook 'tuareg-mode-hook 'merlin-eldoc-setup)
(add-hook 'reason-mode-hook 'merlin-eldoc-setup)
   #+END_SRC

* Usage

If a hook has been configured, then there is nothing to do. The eldoc
mode should be launched automatically when an OCaml file is
visited. And merlin will provide type information when available.

Otherwise, it can be launched by executing ~M-x merlin-eldoc-setup~.

Once this is done, as soon as the point is on a word which is not a
keyword, a type should be displayed in the echo area when the cursor
doesn't move for some time.

It is possible to configure the shape of the results using both eldoc
and merlin-eldoc configurations. It allows to choose on how many lines
the result will fit, if the documentation can be truncated, how to
concatenate type and documentation...

For eldoc, the value to configure is
~eldoc-echo-area-use-multiline-p~.

For merlin-eldoc, the easiest way it so use the customize interface to
get access to all the possible values and the corresponding
documentation.

#+BEGIN_SRC
M-x merlin-eldoc-customize RET
#+END_SRC

The main values are:

- ~merlin-eldoc-type~ to enable or disable the display of the type.
- ~merlin-eldoc-doc~ to enable or disable the display of the
  documentation.
- ~merlin-eldoc-max-lines~ to set on how many lines the result should
  fit.

* Configuration example

#+BEGIN_SRC emacs-lisp
(quelpa '(merlin-eldoc :repo "Khady/merlin-eldoc" :fetcher github))

;; use multiple lines when necessary
(setq eldoc-echo-area-use-multiline-p t)

;; but no more than 10
(setq merlin-eldoc-max-lines 10)

;; don't dedicate a line to the documentation
(setq merlin-eldoc-max-lines-doc 'fit)

;; start merlin-eldoc when editing ocaml and reason files
(add-hook 'tuareg-mode-hook #'merlin-eldoc-setup)
(add-hook 'reason-mode-hook #'merlin-eldoc-setup)
#+END_SRC

* Demo

Short video of demonstration with both type and documentation enabled:

#+ATTR_HTML: title="demo video"
[[https://d.khady.info/merlin-eldoc.ogv][file:merlin-eldoc.gif]]

Note that merlin is never called explicitly in this video. The only
action is to move the pointer from one place to another.
